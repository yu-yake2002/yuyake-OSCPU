$version Generated by VerilatedVcd $end
$date Tue Sep 14 14:29:34 2021 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 X' clock $end
  $var wire 64 Z' io_logCtrl_log_begin [63:0] $end
  $var wire 64 \' io_logCtrl_log_end [63:0] $end
  $var wire 64 ^' io_logCtrl_log_level [63:0] $end
  $var wire  1 `' io_perfInfo_clean $end
  $var wire  1 a' io_perfInfo_dump $end
  $var wire  8 e' io_uart_in_ch [7:0] $end
  $var wire  1 d' io_uart_in_valid $end
  $var wire  8 c' io_uart_out_ch [7:0] $end
  $var wire  1 b' io_uart_out_valid $end
  $var wire  1 Y' reset $end
  $scope module SimTop $end
   $var wire  1 @' bj_ena $end
   $var wire 64 = bj_pc [63:0] $end
   $var wire  8 8 byte_enable [7:0] $end
   $var wire  1 X' clock $end
   $var wire 32 :" cmt_inst [31:0] $end
   $var wire 64 8" cmt_pc [63:0] $end
   $var wire 64 6" cmt_wdata [63:0] $end
   $var wire  8 5" cmt_wdest [7:0] $end
   $var wire  1 4" cmt_wen $end
   $var wire 12 N csr_rd_addr [11:0] $end
   $var wire 64 m' csr_rd_data [63:0] $end
   $var wire  1 z' csr_rd_ena $end
   $var wire 12 |' csr_wr_addr [11:0] $end
   $var wire  1 {' csr_wr_ena $end
   $var wire 64 =" cycleCnt [63:0] $end
   $var wire  1 v' ex_allowin $end
   $var wire 12 S ex_alu_info [11:0] $end
   $var wire  8 T ex_bj_info [7:0] $end
   $var wire 64 c ex_csr_data [63:0] $end
   $var wire 12 o ex_csr_wr_addr [11:0] $end
   $var wire  1 q ex_csr_wr_ena $end
   $var wire  1 p ex_csr_wr_ena_r $end
   $var wire 64 k' ex_data [63:0] $end
   $var wire 32 Q ex_inst [31:0] $end
   $var wire  1 R ex_is_word_opt $end
   $var wire 64 U ex_jmp_imm [63:0] $end
   $var wire  7 i ex_load_info [6:0] $end
   $var wire 64 W ex_now_op1 [63:0] $end
   $var wire 64 Y ex_now_op2 [63:0] $end
   $var wire 64 O ex_pc [63:0] $end
   $var wire  1 h ex_ram_rd_ena $end
   $var wire  1 f ex_ram_rd_ena_r $end
   $var wire  1 g ex_ram_wr_ena $end
   $var wire  1 e ex_ram_wr_ena_r $end
   $var wire  1 v' ex_ready_go $end
   $var wire  5 l ex_reg_wr_addr [4:0] $end
   $var wire  3 k ex_reg_wr_ctrl [2:0] $end
   $var wire  1 n ex_reg_wr_ena $end
   $var wire  1 m ex_reg_wr_ena_r $end
   $var wire  5 a ex_rs1_addr [4:0] $end
   $var wire 64 ] ex_rs1_data [63:0] $end
   $var wire  5 b ex_rs2_addr [4:0] $end
   $var wire 64 _ ex_rs2_data [63:0] $end
   $var wire  4 j ex_save_info [3:0] $end
   $var wire  1 r ex_to_mem_valid $end
   $var wire  1 [ ex_use_rs1 $end
   $var wire  1 \ ex_use_rs2 $end
   $var wire  1 r ex_valid $end
   $var wire  1 # excp_enter $end
   $var wire  1 y' excp_exit $end
   $var wire  1 $ excp_jmp_ena $end
   $var wire 64 ? excp_pc [63:0] $end
   $var wire  1 @' flush $end
   $var wire  1 A' id_allowin $end
   $var wire 12 F id_alu_info [11:0] $end
   $var wire  8 G id_bj_info [7:0] $end
   $var wire 64 t' id_csr_data [63:0] $end
   $var wire 12 N id_csr_wr_addr [11:0] $end
   $var wire  1 j' id_csr_wr_ena $end
   $var wire 16 s' id_excp [15:0] $end
   $var wire 32 C id_inst [31:0] $end
   $var wire  1 E id_is_word_opt $end
   $var wire 64 J id_jmp_imm [63:0] $end
   $var wire  7 H id_load_info [6:0] $end
   $var wire 64 E' id_op1 [63:0] $end
   $var wire 64 G' id_op2 [63:0] $end
   $var wire 64 A id_pc [63:0] $end
   $var wire  1 g' id_ram_rd_ena $end
   $var wire  1 f' id_ram_wr_ena $end
   $var wire  1 B' id_ready_go $end
   $var wire  5 i' id_reg_wr_addr [4:0] $end
   $var wire  3 h' id_reg_wr_ctrl [2:0] $end
   $var wire  1 M' id_reg_wr_ena $end
   $var wire 64 I' id_rs1_data [63:0] $end
   $var wire 64 K' id_rs2_data [63:0] $end
   $var wire  4 I id_save_info [3:0] $end
   $var wire  1 C' id_to_ex_valid $end
   $var wire  1 L id_use_rs1 $end
   $var wire  1 M id_use_rs2 $end
   $var wire  1 D id_valid $end
   $var wire 16 r' if_excp [15:0] $end
   $var wire 64 >' if_pc [63:0] $end
   $var wire 64 ?" instrCnt [63:0] $end
   $var wire 64 Z' io_logCtrl_log_begin [63:0] $end
   $var wire 64 \' io_logCtrl_log_end [63:0] $end
   $var wire 64 ^' io_logCtrl_log_level [63:0] $end
   $var wire  1 `' io_perfInfo_clean $end
   $var wire  1 a' io_perfInfo_dump $end
   $var wire  8 e' io_uart_in_ch [7:0] $end
   $var wire  1 d' io_uart_in_valid $end
   $var wire  8 c' io_uart_out_ch [7:0] $end
   $var wire  1 b' io_uart_out_valid $end
   $var wire 64 ." mcause_rd_data [63:0] $end
   $var wire 64 % mcause_wr_data [63:0] $end
   $var wire  1 v' mem_allowin $end
   $var wire 64 &! mem_csr_data [63:0] $end
   $var wire 12 w' mem_csr_wr_addr [11:0] $end
   $var wire  1 -! mem_csr_wr_ena $end
   $var wire 64 $! mem_ex_data [63:0] $end
   $var wire 16 x' mem_excp [15:0] $end
   $var wire 32 } mem_inst [31:0] $end
   $var wire  7 ~ mem_load_info [6:0] $end
   $var wire 64 { mem_pc [63:0] $end
   $var wire 64 N' mem_ram_data [63:0] $end
   $var wire  1 )! mem_ram_rd_ena $end
   $var wire  1 (! mem_ram_wr_ena $end
   $var wire 64 "! mem_ram_wr_src [63:0] $end
   $var wire  1 v' mem_ready_go $end
   $var wire  5 +! mem_reg_wr_addr [4:0] $end
   $var wire  3 *! mem_reg_wr_ctrl [2:0] $end
   $var wire  1 ,! mem_reg_wr_ena $end
   $var wire  4 !! mem_save_info [3:0] $end
   $var wire  1 .! mem_to_wb_valid $end
   $var wire  1 .! mem_valid $end
   $var wire 64 ," mepc_rd_data [63:0] $end
   $var wire 64 *" mepc_wr_data [63:0] $end
   $var wire 64 $" mie_rd_data [63:0] $end
   $var wire 64 2" mip_rd_data [63:0] $end
   $var wire 64 (" mscratch_rd_data [63:0] $end
   $var wire 64 "" mstatus_rd_data [63:0] $end
   $var wire 64 ~! mstatus_wr_data [63:0] $end
   $var wire 64 }' mtval_rd_data [63:0] $end
   $var wire 64 0" mtval_wr_data [63:0] $end
   $var wire 64 &" mtvec_rd_data [63:0] $end
   $var wire 64 I' r_data1 [63:0] $end
   $var wire 64 K' r_data2 [63:0] $end
   $var wire 64 ; ram_rd_data [63:0] $end
   $var wire 64 9 ram_wr_data [63:0] $end
   $var wire 64 p' rd_data [63:0] $end
   $var wire 64 >! regs(0) [63:0] $end
   $var wire 64 @! regs(1) [63:0] $end
   $var wire 64 R! regs(10) [63:0] $end
   $var wire 64 T! regs(11) [63:0] $end
   $var wire 64 V! regs(12) [63:0] $end
   $var wire 64 X! regs(13) [63:0] $end
   $var wire 64 Z! regs(14) [63:0] $end
   $var wire 64 \! regs(15) [63:0] $end
   $var wire 64 ^! regs(16) [63:0] $end
   $var wire 64 `! regs(17) [63:0] $end
   $var wire 64 b! regs(18) [63:0] $end
   $var wire 64 d! regs(19) [63:0] $end
   $var wire 64 B! regs(2) [63:0] $end
   $var wire 64 f! regs(20) [63:0] $end
   $var wire 64 h! regs(21) [63:0] $end
   $var wire 64 j! regs(22) [63:0] $end
   $var wire 64 l! regs(23) [63:0] $end
   $var wire 64 n! regs(24) [63:0] $end
   $var wire 64 p! regs(25) [63:0] $end
   $var wire 64 r! regs(26) [63:0] $end
   $var wire 64 t! regs(27) [63:0] $end
   $var wire 64 v! regs(28) [63:0] $end
   $var wire 64 x! regs(29) [63:0] $end
   $var wire 64 D! regs(3) [63:0] $end
   $var wire 64 z! regs(30) [63:0] $end
   $var wire 64 |! regs(31) [63:0] $end
   $var wire 64 F! regs(4) [63:0] $end
   $var wire 64 H! regs(5) [63:0] $end
   $var wire 64 J! regs(6) [63:0] $end
   $var wire 64 L! regs(7) [63:0] $end
   $var wire 64 N! regs(8) [63:0] $end
   $var wire 64 P! regs(9) [63:0] $end
   $var wire  1 Y' reset $end
   $var wire 64 s rs1_forward [63:0] $end
   $var wire  5 Q' rs1_r_addr [4:0] $end
   $var wire  1 P' rs1_r_ena $end
   $var wire 64 u rs2_forward [63:0] $end
   $var wire  5 S' rs2_r_addr [4:0] $end
   $var wire  1 R' rs2_r_ena $end
   $var wire  1 <" skip $end
   $var wire  1 D' stall $end
   $var wire 64 w true_op1 [63:0] $end
   $var wire 64 y true_op2 [63:0] $end
   $var wire  1 ;" vaild $end
   $var wire  1 v' wb_allowin $end
   $var wire 64 7! wb_csr_data [63:0] $end
   $var wire 12 ;! wb_csr_wr_addr [11:0] $end
   $var wire  1 <! wb_csr_wr_ena $end
   $var wire 64 3! wb_ex_data [63:0] $end
   $var wire 32 1! wb_inst [31:0] $end
   $var wire 64 /! wb_pc [63:0] $end
   $var wire 64 5! wb_ram_data [63:0] $end
   $var wire  5 9! wb_reg_wr_addr [4:0] $end
   $var wire  3 2! wb_reg_wr_ctrl [2:0] $end
   $var wire 64 T' wb_reg_wr_data [63:0] $end
   $var wire  1 :! wb_reg_wr_ena $end
   $var wire  1 =! wb_valid $end
   $scope module CSRfile $end
    $var wire  1 X' clk $end
    $var wire 64 "( csr_marchid [63:0] $end
    $var wire 64 ." csr_mcause [63:0] $end
    $var wire 64 P& csr_mcycle [63:0] $end
    $var wire 64 ," csr_mepc [63:0] $end
    $var wire 64 "( csr_mhartid [63:0] $end
    $var wire 64 $" csr_mie [63:0] $end
    $var wire 64 "( csr_mimpid [63:0] $end
    $var wire 64 2" csr_mip [63:0] $end
    $var wire 64 '( csr_misa [63:0] $end
    $var wire 64 (" csr_mscratch [63:0] $end
    $var wire 64 "" csr_mstatus [63:0] $end
    $var wire 64 F& csr_mtval [63:0] $end
    $var wire 64 &" csr_mtvec [63:0] $end
    $var wire 64 "( csr_mvendorid [63:0] $end
    $var wire 12 N csr_rd_addr [11:0] $end
    $var wire 64 m' csr_rd_data [63:0] $end
    $var wire  1 z' csr_rd_ena $end
    $var wire 12 ;! csr_wr_addr [11:0] $end
    $var wire 64 3! csr_wr_data [63:0] $end
    $var wire  1 <! csr_wr_ena $end
    $var wire  1 # excp_enter $end
    $var wire  1 y' excp_exit $end
    $var wire 64 ." mcause_rd_data [63:0] $end
    $var wire 64 % mcause_wr_data [63:0] $end
    $var wire 64 ," mepc_rd_data [63:0] $end
    $var wire 64 *" mepc_wr_data [63:0] $end
    $var wire 64 $" mie_rd_data [63:0] $end
    $var wire 64 2" mip_rd_data [63:0] $end
    $var wire 64 (" mscratch_rd_data [63:0] $end
    $var wire 64 "" mstatus_rd_data [63:0] $end
    $var wire 64 ~! mstatus_wr_data [63:0] $end
    $var wire 64 }' mtval_rd_data [63:0] $end
    $var wire 64 0" mtval_wr_data [63:0] $end
    $var wire 64 &" mtvec_rd_data [63:0] $end
    $var wire  1 U& rd_marchid $end
    $var wire  1 @& rd_mcause $end
    $var wire  1 N& rd_mcycle $end
    $var wire  1 <& rd_mepc $end
    $var wire  1 Y& rd_mhartid $end
    $var wire  1 0& rd_mie $end
    $var wire  1 W& rd_mimpid $end
    $var wire  1 J& rd_mip $end
    $var wire  1 -& rd_misa $end
    $var wire  1 8& rd_mscratch $end
    $var wire  1 *& rd_mstatus $end
    $var wire  1 D& rd_mtval $end
    $var wire  1 4& rd_mtvec $end
    $var wire  1 S& rd_mvendorid $end
    $var wire  1 Y' rst $end
    $var wire  1 T& sel_marchid $end
    $var wire  1 X& sel_mhartid $end
    $var wire  1 V& sel_mimpid $end
    $var wire  1 ,& sel_misa $end
    $var wire  1 R& sel_mvendorid $end
    $var wire  1 >& sel_rd_mcause $end
    $var wire  1 L& sel_rd_mcycle $end
    $var wire  1 :& sel_rd_mepc $end
    $var wire  1 .& sel_rd_mie $end
    $var wire  1 H& sel_rd_mip $end
    $var wire  1 6& sel_rd_mscratch $end
    $var wire  1 (& sel_rd_mstatus $end
    $var wire  1 B& sel_rd_mtval $end
    $var wire  1 2& sel_rd_mtvec $end
    $var wire  1 ?& sel_wr_mcause $end
    $var wire  1 M& sel_wr_mcycle $end
    $var wire  1 ;& sel_wr_mepc $end
    $var wire  1 /& sel_wr_mie $end
    $var wire  1 I& sel_wr_mip $end
    $var wire  1 7& sel_wr_mscratch $end
    $var wire  1 )& sel_wr_mstatus $end
    $var wire  1 C& sel_wr_mtval $end
    $var wire  1 3& sel_wr_mtvec $end
    $var wire  1 A& wr_mcause $end
    $var wire  1 O& wr_mcycle $end
    $var wire  1 =& wr_mepc $end
    $var wire  1 1& wr_mie $end
    $var wire  1 K& wr_mip $end
    $var wire  1 9& wr_mscratch $end
    $var wire  1 +& wr_mstatus $end
    $var wire  1 E& wr_mtval $end
    $var wire  1 5& wr_mtvec $end
   $upscope $end
   $scope module DifftestArchFpRegState $end
    $var wire  1 X' clock $end
    $var wire  8 )( coreid [7:0] $end
    $var wire 64 "( fpr_0 [63:0] $end
    $var wire 64 "( fpr_1 [63:0] $end
    $var wire 64 "( fpr_10 [63:0] $end
    $var wire 64 "( fpr_11 [63:0] $end
    $var wire 64 "( fpr_12 [63:0] $end
    $var wire 64 "( fpr_13 [63:0] $end
    $var wire 64 "( fpr_14 [63:0] $end
    $var wire 64 "( fpr_15 [63:0] $end
    $var wire 64 "( fpr_16 [63:0] $end
    $var wire 64 "( fpr_17 [63:0] $end
    $var wire 64 "( fpr_18 [63:0] $end
    $var wire 64 "( fpr_19 [63:0] $end
    $var wire 64 "( fpr_2 [63:0] $end
    $var wire 64 "( fpr_20 [63:0] $end
    $var wire 64 "( fpr_21 [63:0] $end
    $var wire 64 "( fpr_22 [63:0] $end
    $var wire 64 "( fpr_23 [63:0] $end
    $var wire 64 "( fpr_24 [63:0] $end
    $var wire 64 "( fpr_25 [63:0] $end
    $var wire 64 "( fpr_26 [63:0] $end
    $var wire 64 "( fpr_27 [63:0] $end
    $var wire 64 "( fpr_28 [63:0] $end
    $var wire 64 "( fpr_29 [63:0] $end
    $var wire 64 "( fpr_3 [63:0] $end
    $var wire 64 "( fpr_30 [63:0] $end
    $var wire 64 "( fpr_31 [63:0] $end
    $var wire 64 "( fpr_4 [63:0] $end
    $var wire 64 "( fpr_5 [63:0] $end
    $var wire 64 "( fpr_6 [63:0] $end
    $var wire 64 "( fpr_7 [63:0] $end
    $var wire 64 "( fpr_8 [63:0] $end
    $var wire 64 "( fpr_9 [63:0] $end
   $upscope $end
   $scope module DifftestArchIntRegState $end
    $var wire  1 X' clock $end
    $var wire  8 )( coreid [7:0] $end
    $var wire 64 Z& gpr_0 [63:0] $end
    $var wire 64 \& gpr_1 [63:0] $end
    $var wire 64 n& gpr_10 [63:0] $end
    $var wire 64 p& gpr_11 [63:0] $end
    $var wire 64 r& gpr_12 [63:0] $end
    $var wire 64 t& gpr_13 [63:0] $end
    $var wire 64 v& gpr_14 [63:0] $end
    $var wire 64 x& gpr_15 [63:0] $end
    $var wire 64 z& gpr_16 [63:0] $end
    $var wire 64 |& gpr_17 [63:0] $end
    $var wire 64 ~& gpr_18 [63:0] $end
    $var wire 64 "' gpr_19 [63:0] $end
    $var wire 64 ^& gpr_2 [63:0] $end
    $var wire 64 $' gpr_20 [63:0] $end
    $var wire 64 &' gpr_21 [63:0] $end
    $var wire 64 (' gpr_22 [63:0] $end
    $var wire 64 *' gpr_23 [63:0] $end
    $var wire 64 ,' gpr_24 [63:0] $end
    $var wire 64 .' gpr_25 [63:0] $end
    $var wire 64 0' gpr_26 [63:0] $end
    $var wire 64 2' gpr_27 [63:0] $end
    $var wire 64 4' gpr_28 [63:0] $end
    $var wire 64 6' gpr_29 [63:0] $end
    $var wire 64 `& gpr_3 [63:0] $end
    $var wire 64 8' gpr_30 [63:0] $end
    $var wire 64 :' gpr_31 [63:0] $end
    $var wire 64 b& gpr_4 [63:0] $end
    $var wire 64 d& gpr_5 [63:0] $end
    $var wire 64 f& gpr_6 [63:0] $end
    $var wire 64 h& gpr_7 [63:0] $end
    $var wire 64 j& gpr_8 [63:0] $end
    $var wire 64 l& gpr_9 [63:0] $end
   $upscope $end
   $scope module DifftestCSRState $end
    $var wire  1 X' clock $end
    $var wire  8 )( coreid [7:0] $end
    $var wire 64 ." mcause [63:0] $end
    $var wire 64 "( medeleg [63:0] $end
    $var wire 64 ," mepc [63:0] $end
    $var wire 64 "( mideleg [63:0] $end
    $var wire 64 "( mie [63:0] $end
    $var wire 64 2" mip [63:0] $end
    $var wire 64 (" mscratch [63:0] $end
    $var wire 64 "" mstatus [63:0] $end
    $var wire 64 }' mtval [63:0] $end
    $var wire 64 &" mtvec [63:0] $end
    $var wire  2 *( priviledgeMode [1:0] $end
    $var wire 64 "( satp [63:0] $end
    $var wire 64 "( scause [63:0] $end
    $var wire 64 "( sepc [63:0] $end
    $var wire 64 "( sscratch [63:0] $end
    $var wire 64 "( sstatus [63:0] $end
    $var wire 64 "( stval [63:0] $end
    $var wire 64 "( stvec [63:0] $end
   $upscope $end
   $scope module DifftestInstrCommit $end
    $var wire  1 X' clock $end
    $var wire  8 )( coreid [7:0] $end
    $var wire  8 )( index [7:0] $end
    $var wire 32 :" instr [31:0] $end
    $var wire  1 $( isRVC $end
    $var wire 64 8" pc [63:0] $end
    $var wire  1 $( scFailed $end
    $var wire  1 <" skip $end
    $var wire  1 ;" valid $end
    $var wire 64 6" wdata [63:0] $end
    $var wire  8 5" wdest [7:0] $end
    $var wire  1 4" wen $end
   $upscope $end
   $scope module DifftestTrapEvent $end
    $var wire  1 X' clock $end
    $var wire  3 =' code [2:0] $end
    $var wire  8 )( coreid [7:0] $end
    $var wire 64 =" cycleCnt [63:0] $end
    $var wire 64 ?" instrCnt [63:0] $end
    $var wire 64 8" pc [63:0] $end
    $var wire  1 <' valid $end
   $upscope $end
   $scope module Ex_stage $end
    $var wire 12 S alu_info [11:0] $end
    $var wire  8 \# bj_data [7:0] $end
    $var wire  1 @' bj_ena $end
    $var wire  8 T bj_info [7:0] $end
    $var wire 64 = bj_pc [63:0] $end
    $var wire 64 w ex_op1 [63:0] $end
    $var wire 64 y ex_op2 [63:0] $end
    $var wire  1 r ex_valid $end
    $var wire  1 R is_word_opt $end
    $var wire 64 U jmp_imm [63:0] $end
    $var wire 64 O now_pc [63:0] $end
    $var wire 64 ]# op1 [63:0] $end
    $var wire 64 _# op2 [63:0] $end
    $var wire 64 k' rd_data [63:0] $end
    $var wire 64 s rs1_forward [63:0] $end
    $var wire 64 u rs2_forward [63:0] $end
    $var wire  1 Y' rst $end
    $scope module Exe_stage_alu $end
     $var wire 65 ,$ add_res [64:0] $end
     $var wire 65 )$ adder_cin [64:0] $end
     $var wire 65 #$ adder_in1 [64:0] $end
     $var wire 65 &$ adder_in2 [64:0] $end
     $var wire 65 {# adder_op1 [64:0] $end
     $var wire 65 ~# adder_op2 [64:0] $end
     $var wire 12 S alu_info [11:0] $end
     $var wire 64 k' alu_output [63:0] $end
     $var wire 64 5$ and_res [63:0] $end
     $var wire 64 7$ andn_res [63:0] $end
     $var wire  8 \# bj_data [7:0] $end
     $var wire 64 u# eff_mask [63:0] $end
     $var wire  1 9$ eq_res $end
     $var wire  1 R is_word_opt $end
     $var wire 64 ]# op1 [63:0] $end
     $var wire 64 _# op2 [63:0] $end
     $var wire  1 a# op_add $end
     $var wire  1 z# op_addsub $end
     $var wire  1 g# op_and $end
     $var wire  1 k# op_andn $end
     $var wire  1 f# op_or $end
     $var wire  1 m# op_shift $end
     $var wire  1 h# op_sll $end
     $var wire  1 c# op_slt $end
     $var wire  1 d# op_sltu $end
     $var wire  1 j# op_sra $end
     $var wire  1 i# op_srl $end
     $var wire  1 b# op_sub $end
     $var wire  1 d# op_unsigned $end
     $var wire  1 l# op_wri $end
     $var wire  1 e# op_xor $end
     $var wire 64 3$ or_res [63:0] $end
     $var wire  1 Y' rst $end
     $var wire 64 n# shifter_in1 [63:0] $end
     $var wire  6 p# shifter_in2 [5:0] $end
     $var wire 64 ]# shifter_op1 [63:0] $end
     $var wire 64 q# shifter_res [63:0] $end
     $var wire 64 q# sll_res [63:0] $end
     $var wire 64 /$ slt_res [63:0] $end
     $var wire 64 /$ sltu_res [63:0] $end
     $var wire 64 w# sra_res [63:0] $end
     $var wire 64 s# srl_res [63:0] $end
     $var wire  1 a# temp_add $end
     $var wire 64 V' temp_output [63:0] $end
     $var wire  1 y# temp_sub $end
     $var wire 64 _# wri_res [63:0] $end
     $var wire 64 1$ xor_res [63:0] $end
    $upscope $end
    $scope module Exe_stage_bj $end
     $var wire  8 \# bj_data [7:0] $end
     $var wire  1 @' bj_ena $end
     $var wire  8 T bj_info [7:0] $end
     $var wire 64 s ex_op1 [63:0] $end
     $var wire  1 r ex_valid $end
     $var wire 64 U jmp_imm [63:0] $end
     $var wire 64 = new_pc [63:0] $end
     $var wire 64 O now_pc [63:0] $end
     $var wire  1 Y' rst $end
    $upscope $end
   $upscope $end
   $scope module Excp_handler $end
    $var wire  1 + excp_brk_pt $end
    $var wire  1 0 excp_ecall_m $end
    $var wire  1 # excp_enter $end
    $var wire 64 && excp_enter_pc [63:0] $end
    $var wire  1 y' excp_exit $end
    $var wire 64 ," excp_exit_pc [63:0] $end
    $var wire 63 4 excp_idx [62:0] $end
    $var wire  1 * excp_ilg_inst $end
    $var wire 16 ' excp_info [15:0] $end
    $var wire  1 ) excp_inst_acc $end
    $var wire  1 ( excp_inst_misal $end
    $var wire  1 1 excp_inst_page $end
    $var wire  1 $ excp_jmp_ena $end
    $var wire  1 - excp_load_acc $end
    $var wire  1 , excp_load_misal $end
    $var wire  1 2 excp_load_page $end
    $var wire 16 t% excp_pc [15:0] $end
    $var wire  1 / excp_stor_acc $end
    $var wire  1 . excp_stor_misal $end
    $var wire  1 3 excp_stor_page $end
    $var wire  1 $( exter_itrp $end
    $var wire 16 s' id_excp [15:0] $end
    $var wire 16 r' if_excp [15:0] $end
    $var wire  1 6 inst_acc_fault $end
    $var wire 63 %( itrp_idx [62:0] $end
    $var wire 12 !( itrp_info [11:0] $end
    $var wire 64 % mcause_wr_data [63:0] $end
    $var wire 64 "( mem_acc_addr [63:0] $end
    $var wire  1 7 mem_acc_fault $end
    $var wire 16 x' mem_excp [15:0] $end
    $var wire 64 ," mepc_rd_data [63:0] $end
    $var wire 64 *" mepc_wr_data [63:0] $end
    $var wire 64 {% mstatus_excp_enter [63:0] $end
    $var wire 64 }% mstatus_excp_exit [63:0] $end
    $var wire  1 y% mstatus_mie $end
    $var wire  1 w% mstatus_mpie $end
    $var wire 56 u% mstatus_p1 [63:8] $end
    $var wire  3 x% mstatus_p2 [6:4] $end
    $var wire  3 z% mstatus_p3 [2:0] $end
    $var wire 64 "" mstatus_rd_data [63:0] $end
    $var wire 64 ~! mstatus_wr_data [63:0] $end
    $var wire 64 0" mtval_wr_data [63:0] $end
    $var wire 62 $& mtvec_base [61:0] $end
    $var wire  2 !& mtvec_mode [1:0] $end
    $var wire  1 "& mtvec_mode0 $end
    $var wire  1 #& mtvec_mode1 $end
    $var wire 64 &" mtvec_rd_data [63:0] $end
    $var wire 32 } now_inst [31:0] $end
    $var wire 64 { now_pc [63:0] $end
    $var wire  1 $( soft_itrp $end
    $var wire  1 # sp_excp_ena $end
    $var wire  1 $( sp_itrp_ena $end
    $var wire  1 $( timer_itrp $end
   $upscope $end
   $scope module Forward $end
    $var wire 64 $! mem_ex_data [63:0] $end
    $var wire  1 T# mem_op1_src_ex $end
    $var wire  1 V# mem_op1_src_mem $end
    $var wire  1 X# mem_op2_src_ex $end
    $var wire  1 Z# mem_op2_src_mem $end
    $var wire  5 +! mem_reg_wr_addr [4:0] $end
    $var wire  3 *! mem_reg_wr_ctrl [2:0] $end
    $var wire  1 ,! mem_reg_wr_ena $end
    $var wire  5 a rs1_addr [4:0] $end
    $var wire 64 s rs1_forward [63:0] $end
    $var wire 64 ] rs1_now [63:0] $end
    $var wire  5 b rs2_addr [4:0] $end
    $var wire 64 u rs2_forward [63:0] $end
    $var wire 64 _ rs2_now [63:0] $end
    $var wire 64 3! wb_ex_data [63:0] $end
    $var wire 64 5! wb_mem_data [63:0] $end
    $var wire  1 U# wb_op1_src_ex $end
    $var wire  1 W# wb_op1_src_mem $end
    $var wire  1 Y# wb_op2_src_ex $end
    $var wire  1 [# wb_op2_src_mem $end
    $var wire  5 9! wb_reg_wr_addr [4:0] $end
    $var wire  3 2! wb_reg_wr_ctrl [2:0] $end
    $var wire  1 :! wb_reg_wr_ena $end
   $upscope $end
   $scope module Hazard $end
    $var wire  1 h ex_ram_rd_ena $end
    $var wire  5 l ex_reg_wr_addr [4:0] $end
    $var wire  5 Q' rs1_addr [4:0] $end
    $var wire  5 S' rs2_addr [4:0] $end
    $var wire  1 D' stall $end
   $upscope $end
   $scope module Id_stage $end
    $var wire 12 F alu_info [11:0] $end
    $var wire  1 $# arith_id_vld $end
    $var wire  1 )# arith_iw_vld $end
    $var wire  1 9# arith_rd_vld $end
    $var wire  1 ?# arith_rw_vld $end
    $var wire  1 `" auipc_vld $end
    $var wire  8 G bj_info [7:0] $end
    $var wire  1 F# branch_vld $end
    $var wire  1 X' clk $end
    $var wire 12 N csr_addr [11:0] $end
    $var wire 64 t' csr_data [63:0] $end
    $var wire 12 N csr_rd_addr [11:0] $end
    $var wire  1 z' csr_rd_ena $end
    $var wire  1 j' csr_to_reg $end
    $var wire  1 R# csr_vld $end
    $var wire 12 N csr_wr_addr [11:0] $end
    $var wire  1 j' csr_wr_ena $end
    $var wire  1 K# excp_vld $end
    $var wire  1 o' exe_to_reg $end
    $var wire  1 x" fence_vld $end
    $var wire  3 F" func3 [2:0] $end
    $var wire  1 N" func3_0 $end
    $var wire  1 O" func3_1 $end
    $var wire  1 P" func3_2 $end
    $var wire  1 Q" func3_3 $end
    $var wire  1 R" func3_4 $end
    $var wire  1 S" func3_5 $end
    $var wire  1 T" func3_6 $end
    $var wire  1 U" func3_7 $end
    $var wire  6 G" func6 [5:0] $end
    $var wire  1 V" func6_00 $end
    $var wire  1 W" func6_10 $end
    $var wire  7 H" func7 [6:0] $end
    $var wire  1 X" func7_00 $end
    $var wire  1 Y" func7_20 $end
    $var wire 64 E' id_op1 [63:0] $end
    $var wire 64 G' id_op2 [63:0] $end
    $var wire 64 I' id_rs1_data [63:0] $end
    $var wire 64 K' id_rs2_data [63:0] $end
    $var wire  1 Z" imm12_000 $end
    $var wire  1 [" imm12_001 $end
    $var wire  1 \" imm12_102 $end
    $var wire 13 K" immB [12:0] $end
    $var wire 12 N immI [11:0] $end
    $var wire 21 M" immJ [20:0] $end
    $var wire 12 J" immS [11:0] $end
    $var wire 20 L" immU [19:0] $end
    $var wire 32 C inst [31:0] $end
    $var wire  1 /# inst_add $end
    $var wire  1 y" inst_addi $end
    $var wire  1 %# inst_addiw $end
    $var wire  1 :# inst_addw $end
    $var wire  1 8# inst_and $end
    $var wire  1 ## inst_andi $end
    $var wire  1 `" inst_auipc $end
    $var wire  1 f" inst_b $end
    $var wire  1 @# inst_beq $end
    $var wire  1 C# inst_bge $end
    $var wire  1 E# inst_bgeu $end
    $var wire  1 B# inst_blt $end
    $var wire  1 D# inst_bltu $end
    $var wire  1 A# inst_bne $end
    $var wire  1 N# inst_csrrc $end
    $var wire  1 Q# inst_csrrci $end
    $var wire  1 M# inst_csrrs $end
    $var wire  1 P# inst_csrrsi $end
    $var wire  1 L# inst_csrrw $end
    $var wire  1 O# inst_csrrwi $end
    $var wire  1 I# inst_ebreak $end
    $var wire  1 H# inst_ecall $end
    $var wire  1 v" inst_fence $end
    $var wire  1 w" inst_fence_i $end
    $var wire  1 _" inst_i_arith_dword $end
    $var wire  1 a" inst_i_arith_word $end
    $var wire  1 k" inst_i_csr_imm $end
    $var wire  1 l" inst_i_csr_reg $end
    $var wire  1 j" inst_i_excp $end
    $var wire  1 ^" inst_i_fence $end
    $var wire  1 g" inst_i_jalr $end
    $var wire  1 ]" inst_i_load $end
    $var wire  1 i" inst_i_sys $end
    $var wire  1 h" inst_j $end
    $var wire  1 h" inst_jal $end
    $var wire  1 g" inst_jalr $end
    $var wire  1 n" inst_lb $end
    $var wire  1 r" inst_lbu $end
    $var wire  1 q" inst_ld $end
    $var wire  1 o" inst_lh $end
    $var wire  1 s" inst_lhu $end
    $var wire  1 d" inst_lui $end
    $var wire  1 p" inst_lw $end
    $var wire  1 t" inst_lwu $end
    $var wire  1 J# inst_mret $end
    $var wire  1 7# inst_or $end
    $var wire  1 "# inst_ori $end
    $var wire  1 m" inst_putch $end
    $var wire  1 c" inst_r_dword $end
    $var wire  1 e" inst_r_word $end
    $var wire  1 b" inst_s $end
    $var wire  1 *# inst_sb $end
    $var wire  1 -# inst_sd $end
    $var wire  1 +# inst_sh $end
    $var wire  1 1# inst_sll $end
    $var wire  1 z" inst_slli $end
    $var wire  1 &# inst_slliw $end
    $var wire  1 <# inst_sllw $end
    $var wire  1 2# inst_slt $end
    $var wire  1 {" inst_slti $end
    $var wire  1 |" inst_sltiu $end
    $var wire  1 3# inst_sltu $end
    $var wire  1 6# inst_sra $end
    $var wire  1 !# inst_srai $end
    $var wire  1 (# inst_sraiw $end
    $var wire  1 ># inst_sraw $end
    $var wire  1 5# inst_srl $end
    $var wire  1 ~" inst_srli $end
    $var wire  1 '# inst_srliw $end
    $var wire  1 =# inst_srlw $end
    $var wire  1 0# inst_sub $end
    $var wire  1 ;# inst_subw $end
    $var wire  1 ,# inst_sw $end
    $var wire  1 `" inst_u_auipc $end
    $var wire  1 d" inst_u_lui $end
    $var wire  1 S# inst_vld $end
    $var wire  1 4# inst_xor $end
    $var wire  1 }" inst_xori $end
    $var wire  1 E is_word_opt $end
    $var wire 64 J jmp_imm [63:0] $end
    $var wire  1 G# jump_vld $end
    $var wire  7 H load_info [6:0] $end
    $var wire  1 u" load_vld $end
    $var wire  1 d" lui_vld $end
    $var wire  1 g' mem_rd_ena $end
    $var wire  1 g' mem_to_reg $end
    $var wire  1 f' mem_wr_ena $end
    $var wire  7 E" opcode [6:0] $end
    $var wire 64 A pc_id [63:0] $end
    $var wire 64 I' r_data1 [63:0] $end
    $var wire 64 K' r_data2 [63:0] $end
    $var wire  5 I" rd_addr [4:0] $end
    $var wire  5 i' reg_wr_addr [4:0] $end
    $var wire  3 h' reg_wr_ctrl [2:0] $end
    $var wire  1 M' reg_wr_ena $end
    $var wire  5 Q' rs1_addr [4:0] $end
    $var wire  1 P' rs1_r_ena $end
    $var wire  5 S' rs2_addr [4:0] $end
    $var wire  1 R' rs2_r_ena $end
    $var wire  1 Y' rst $end
    $var wire  4 I save_info [3:0] $end
    $var wire  1 .# store_vld $end
    $var wire  1 L use_rs1 $end
    $var wire  1 M use_rs2 $end
    $var wire  5 Q' zimm [4:0] $end
   $upscope $end
   $scope module If_stage $end
    $var wire  1 @' bj_ena $end
    $var wire 64 = bj_pc [63:0] $end
    $var wire  1 X' clk $end
    $var wire  1 $ excp_jmp_ena $end
    $var wire 64 ? excp_pc [63:0] $end
    $var wire 64 >' pc [63:0] $end
    $var wire 64 A pc_now [63:0] $end
    $var wire  1 Y' rst $end
   $upscope $end
   $scope module Mem_stage $end
    $var wire  1 :$ addr_0 $end
    $var wire  1 ;$ addr_1 $end
    $var wire  1 <$ addr_2 $end
    $var wire  1 =$ addr_3 $end
    $var wire  1 >$ addr_4 $end
    $var wire  1 ?$ addr_5 $end
    $var wire  1 @$ addr_6 $end
    $var wire  1 A$ addr_7 $end
    $var wire  8 8 byte_enable [7:0] $end
    $var wire  1 X' clk $end
    $var wire  7 ~ load_info [6:0] $end
    $var wire 64 $! mem_addr [63:0] $end
    $var wire 64 N' mem_data [63:0] $end
    $var wire 16 x' mem_excp [15:0] $end
    $var wire 64 I$ mem_part [63:0] $end
    $var wire  1 B$ op_lb $end
    $var wire  1 F$ op_lbu $end
    $var wire  1 E$ op_ld $end
    $var wire  1 C$ op_lh $end
    $var wire  1 G$ op_lhu $end
    $var wire  1 D$ op_lw $end
    $var wire  1 H$ op_lwu $end
    $var wire  1 K$ op_sb $end
    $var wire  1 N$ op_sd $end
    $var wire  1 L$ op_sh $end
    $var wire  1 M$ op_sw $end
    $var wire 64 "! r_data2 [63:0] $end
    $var wire 64 ; ram_rd_data [63:0] $end
    $var wire 64 9 ram_wr_data [63:0] $end
    $var wire  1 Y' rst $end
    $var wire  4 !! save_info [3:0] $end
   $upscope $end
   $scope module RAM_1W2R $end
    $var wire  8 8 byte_enable [7:0] $end
    $var wire  1 X' clk $end
    $var wire 32 C inst [31:0] $end
    $var wire 64 A" inst_2 [63:0] $end
    $var wire 64 A inst_addr [63:0] $end
    $var wire  1 v' inst_ena $end
    $var wire 64 $! mem_addr [63:0] $end
    $var wire 64 ; mem_rd_data [63:0] $end
    $var wire  1 )! mem_rd_ena $end
    $var wire 64 9 mem_wr_data [63:0] $end
    $var wire  1 (! mem_wr_ena $end
    $var wire 64 C" wmask [63:0] $end
   $upscope $end
   $scope module Regfile $end
    $var wire  1 X' clk $end
    $var wire  5 Q' r_addr1 [4:0] $end
    $var wire  5 S' r_addr2 [4:0] $end
    $var wire 64 I' r_data1 [63:0] $end
    $var wire 64 K' r_data2 [63:0] $end
    $var wire  1 P' r_ena1 $end
    $var wire  1 R' r_ena2 $end
    $var wire 64 4% regs(0) [63:0] $end
    $var wire 64 6% regs(1) [63:0] $end
    $var wire 64 H% regs(10) [63:0] $end
    $var wire 64 J% regs(11) [63:0] $end
    $var wire 64 L% regs(12) [63:0] $end
    $var wire 64 N% regs(13) [63:0] $end
    $var wire 64 P% regs(14) [63:0] $end
    $var wire 64 R% regs(15) [63:0] $end
    $var wire 64 T% regs(16) [63:0] $end
    $var wire 64 V% regs(17) [63:0] $end
    $var wire 64 X% regs(18) [63:0] $end
    $var wire 64 Z% regs(19) [63:0] $end
    $var wire 64 8% regs(2) [63:0] $end
    $var wire 64 \% regs(20) [63:0] $end
    $var wire 64 ^% regs(21) [63:0] $end
    $var wire 64 `% regs(22) [63:0] $end
    $var wire 64 b% regs(23) [63:0] $end
    $var wire 64 d% regs(24) [63:0] $end
    $var wire 64 f% regs(25) [63:0] $end
    $var wire 64 h% regs(26) [63:0] $end
    $var wire 64 j% regs(27) [63:0] $end
    $var wire 64 l% regs(28) [63:0] $end
    $var wire 64 n% regs(29) [63:0] $end
    $var wire 64 :% regs(3) [63:0] $end
    $var wire 64 p% regs(30) [63:0] $end
    $var wire 64 r% regs(31) [63:0] $end
    $var wire 64 <% regs(4) [63:0] $end
    $var wire 64 >% regs(5) [63:0] $end
    $var wire 64 @% regs(6) [63:0] $end
    $var wire 64 B% regs(7) [63:0] $end
    $var wire 64 D% regs(8) [63:0] $end
    $var wire 64 F% regs(9) [63:0] $end
    $var wire 64 R$ regs_o(0) [63:0] $end
    $var wire 64 T$ regs_o(1) [63:0] $end
    $var wire 64 f$ regs_o(10) [63:0] $end
    $var wire 64 h$ regs_o(11) [63:0] $end
    $var wire 64 j$ regs_o(12) [63:0] $end
    $var wire 64 l$ regs_o(13) [63:0] $end
    $var wire 64 n$ regs_o(14) [63:0] $end
    $var wire 64 p$ regs_o(15) [63:0] $end
    $var wire 64 r$ regs_o(16) [63:0] $end
    $var wire 64 t$ regs_o(17) [63:0] $end
    $var wire 64 v$ regs_o(18) [63:0] $end
    $var wire 64 x$ regs_o(19) [63:0] $end
    $var wire 64 V$ regs_o(2) [63:0] $end
    $var wire 64 z$ regs_o(20) [63:0] $end
    $var wire 64 |$ regs_o(21) [63:0] $end
    $var wire 64 ~$ regs_o(22) [63:0] $end
    $var wire 64 "% regs_o(23) [63:0] $end
    $var wire 64 $% regs_o(24) [63:0] $end
    $var wire 64 &% regs_o(25) [63:0] $end
    $var wire 64 (% regs_o(26) [63:0] $end
    $var wire 64 *% regs_o(27) [63:0] $end
    $var wire 64 ,% regs_o(28) [63:0] $end
    $var wire 64 .% regs_o(29) [63:0] $end
    $var wire 64 X$ regs_o(3) [63:0] $end
    $var wire 64 0% regs_o(30) [63:0] $end
    $var wire 64 2% regs_o(31) [63:0] $end
    $var wire 64 Z$ regs_o(4) [63:0] $end
    $var wire 64 \$ regs_o(5) [63:0] $end
    $var wire 64 ^$ regs_o(6) [63:0] $end
    $var wire 64 `$ regs_o(7) [63:0] $end
    $var wire 64 b$ regs_o(8) [63:0] $end
    $var wire 64 d$ regs_o(9) [63:0] $end
    $var wire  1 Y' rst $end
    $var wire  5 9! w_addr [4:0] $end
    $var wire 64 T' w_data [63:0] $end
    $var wire  1 :! w_ena $end
   $upscope $end
   $scope module Wb_stage $end
    $var wire 64 7! csr_data [63:0] $end
    $var wire  1 Q$ csr_to_reg $end
    $var wire 64 3! exe_data [63:0] $end
    $var wire  1 P$ exe_to_reg $end
    $var wire 64 5! mem_data [63:0] $end
    $var wire  1 O$ mem_to_reg $end
    $var wire  3 2! reg_wr_ctrl [2:0] $end
    $var wire 64 T' reg_wr_data [63:0] $end
    $var wire  1 Y' rst $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
0$
b0000000000000000000000000000000000000000000000000000000000000000 %
b0000000000000000 '
0(
0)
0*
0+
0,
0-
0.
0/
00
01
02
03
b000000000000000000000000000000000000000000000000000000000000000 4
06
07
b00000000 8
b0000000000000000000000000000000000000000000000000000000000000000 9
b0000000000000000000000000000000000000000000000000000000000000000 ;
b0000000000000000000000000000000000000000000000000000000000000000 =
b0000000000000000000000000000000000000000000000000000000000000000 ?
b0000000000000000000000000000000010000000000000000000000000000000 A
b00000000000100000000000010010011 C
1D
0E
b000000000001 F
b00000000 G
b0000000 H
b0000 I
b0000000000000000000000000000000000000000000000000000000000000000 J
1L
0M
b000000000001 N
b0000000000000000000000000000000000000000000000000000000000000000 O
b00000000000000000000000000000000 Q
0R
b000000000000 S
b00000000 T
b0000000000000000000000000000000000000000000000000000000000000000 U
b0000000000000000000000000000000000000000000000000000000000000000 W
b0000000000000000000000000000000000000000000000000000000000000000 Y
0[
0\
b0000000000000000000000000000000000000000000000000000000000000000 ]
b0000000000000000000000000000000000000000000000000000000000000000 _
b00000 a
b00000 b
b0000000000000000000000000000000000000000000000000000000000000000 c
0e
0f
0g
0h
b0000000 i
b0000 j
b000 k
b00000 l
0m
0n
b000000000000 o
0p
0q
0r
b0000000000000000000000000000000000000000000000000000000000000000 s
b0000000000000000000000000000000000000000000000000000000000000000 u
b0000000000000000000000000000000000000000000000000000000000000000 w
b0000000000000000000000000000000000000000000000000000000000000000 y
b0000000000000000000000000000000000000000000000000000000000000000 {
b00000000000000000000000000000000 }
b0000000 ~
b0000 !!
b0000000000000000000000000000000000000000000000000000000000000000 "!
b0000000000000000000000000000000000000000000000000000000000000000 $!
b0000000000000000000000000000000000000000000000000000000000000000 &!
0(!
0)!
b000 *!
b00000 +!
0,!
0-!
0.!
b0000000000000000000000000000000000000000000000000000000000000000 /!
b00000000000000000000000000000000 1!
b000 2!
b0000000000000000000000000000000000000000000000000000000000000000 3!
b0000000000000000000000000000000000000000000000000000000000000000 5!
b0000000000000000000000000000000000000000000000000000000000000000 7!
b00000 9!
0:!
b000000000000 ;!
0<!
0=!
b0000000000000000000000000000000000000000000000000000000000000000 >!
b0000000000000000000000000000000000000000000000000000000000000000 @!
b0000000000000000000000000000000000000000000000000000000000000000 B!
b0000000000000000000000000000000000000000000000000000000000000000 D!
b0000000000000000000000000000000000000000000000000000000000000000 F!
b0000000000000000000000000000000000000000000000000000000000000000 H!
b0000000000000000000000000000000000000000000000000000000000000000 J!
b0000000000000000000000000000000000000000000000000000000000000000 L!
b0000000000000000000000000000000000000000000000000000000000000000 N!
b0000000000000000000000000000000000000000000000000000000000000000 P!
b0000000000000000000000000000000000000000000000000000000000000000 R!
b0000000000000000000000000000000000000000000000000000000000000000 T!
b0000000000000000000000000000000000000000000000000000000000000000 V!
b0000000000000000000000000000000000000000000000000000000000000000 X!
b0000000000000000000000000000000000000000000000000000000000000000 Z!
b0000000000000000000000000000000000000000000000000000000000000000 \!
b0000000000000000000000000000000000000000000000000000000000000000 ^!
b0000000000000000000000000000000000000000000000000000000000000000 `!
b0000000000000000000000000000000000000000000000000000000000000000 b!
b0000000000000000000000000000000000000000000000000000000000000000 d!
b0000000000000000000000000000000000000000000000000000000000000000 f!
b0000000000000000000000000000000000000000000000000000000000000000 h!
b0000000000000000000000000000000000000000000000000000000000000000 j!
b0000000000000000000000000000000000000000000000000000000000000000 l!
b0000000000000000000000000000000000000000000000000000000000000000 n!
b0000000000000000000000000000000000000000000000000000000000000000 p!
b0000000000000000000000000000000000000000000000000000000000000000 r!
b0000000000000000000000000000000000000000000000000000000000000000 t!
b0000000000000000000000000000000000000000000000000000000000000000 v!
b0000000000000000000000000000000000000000000000000000000000000000 x!
b0000000000000000000000000000000000000000000000000000000000000000 z!
b0000000000000000000000000000000000000000000000000000000000000000 |!
b0000000000000000000000000000000000000000000000000000000000000000 ~!
b0000000000000000000000000000000000000000000000000001100010001000 ""
b0000000000000000000000000000000000000000000000000000100010001000 $"
b0000000000000000000000000000000000000000000000000000000000000000 &"
b0000000000000000000000000000000000000000000000000000000000000000 ("
b0000000000000000000000000000000000000000000000000000000000000000 *"
b0000000000000000000000000000000000000000000000000000000000000000 ,"
b0000000000000000000000000000000000000000000000000000000000000000 ."
b0000000000000000000000000000000000000000000000000000000000000000 0"
b0000000000000000000000000000000000000000000000000000000000000000 2"
04"
b00000000 5"
b0000000000000000000000000000000000000000000000000000000000000000 6"
b0000000000000000000000000000000000000000000000000000000000000000 8"
b00000000000000000000000000000000 :"
0;"
1<"
b0000000000000000000000000000000000000000000000000000000000000001 ="
b0000000000000000000000000000000000000000000000000000000000000000 ?"
b0000000000100000000000001001001100000000000100000000000010010011 A"
b0000000000000000000000000000000000000000000000000000000000000000 C"
b0010011 E"
b000 F"
b000000 G"
b0000000 H"
b00001 I"
b000000000001 J"
b0100000000000 K"
b00000000000100000000 L"
b000000000100000000000 M"
1N"
0O"
0P"
0Q"
0R"
0S"
0T"
0U"
1V"
0W"
1X"
0Y"
0Z"
1["
0\"
0]"
0^"
1_"
0`"
0a"
0b"
0c"
0d"
0e"
0f"
0g"
0h"
0i"
0j"
0k"
0l"
0m"
0n"
0o"
0p"
0q"
0r"
0s"
0t"
0u"
0v"
0w"
0x"
1y"
0z"
0{"
0|"
0}"
0~"
0!#
0"#
0##
1$#
0%#
0&#
0'#
0(#
0)#
0*#
0+#
0,#
0-#
0.#
0/#
00#
01#
02#
03#
04#
05#
06#
07#
08#
09#
0:#
0;#
0<#
0=#
0>#
0?#
0@#
0A#
0B#
0C#
0D#
0E#
0F#
0G#
0H#
0I#
0J#
0K#
0L#
0M#
0N#
0O#
0P#
0Q#
0R#
1S#
0T#
0U#
0V#
0W#
0X#
0Y#
0Z#
0[#
b11101001 \#
b0000000000000000000000000000000000000000000000000000000000000000 ]#
b0000000000000000000000000000000000000000000000000000000000000000 _#
0a#
0b#
0c#
0d#
0e#
0f#
0g#
0h#
0i#
0j#
0k#
0l#
0m#
b0000000000000000000000000000000000000000000000000000000000000000 n#
b000000 p#
b0000000000000000000000000000000000000000000000000000000000000000 q#
b0000000000000000000000000000000000000000000000000000000000000000 s#
b1111111111111111111111111111111111111111111111111111111111111111 u#
b0000000000000000000000000000000000000000000000000000000000000000 w#
0y#
0z#
b00000000000000000000000000000000000000000000000000000000000000000 {#
b00000000000000000000000000000000000000000000000000000000000000000 ~#
b00000000000000000000000000000000000000000000000000000000000000000 #$
b00000000000000000000000000000000000000000000000000000000000000000 &$
b00000000000000000000000000000000000000000000000000000000000000000 )$
b00000000000000000000000000000000000000000000000000000000000000000 ,$
b0000000000000000000000000000000000000000000000000000000000000000 /$
b0000000000000000000000000000000000000000000000000000000000000000 1$
b0000000000000000000000000000000000000000000000000000000000000000 3$
b0000000000000000000000000000000000000000000000000000000000000000 5$
b0000000000000000000000000000000000000000000000000000000000000000 7$
19$
1:$
0;$
0<$
0=$
0>$
0?$
0@$
0A$
0B$
0C$
0D$
0E$
0F$
0G$
0H$
b0000000000000000000000000000000000000000000000000000000000000000 I$
0K$
0L$
0M$
0N$
0O$
0P$
0Q$
b0000000000000000000000000000000000000000000000000000000000000000 R$
b0000000000000000000000000000000000000000000000000000000000000000 T$
b0000000000000000000000000000000000000000000000000000000000000000 V$
b0000000000000000000000000000000000000000000000000000000000000000 X$
b0000000000000000000000000000000000000000000000000000000000000000 Z$
b0000000000000000000000000000000000000000000000000000000000000000 \$
b0000000000000000000000000000000000000000000000000000000000000000 ^$
b0000000000000000000000000000000000000000000000000000000000000000 `$
b0000000000000000000000000000000000000000000000000000000000000000 b$
b0000000000000000000000000000000000000000000000000000000000000000 d$
b0000000000000000000000000000000000000000000000000000000000000000 f$
b0000000000000000000000000000000000000000000000000000000000000000 h$
b0000000000000000000000000000000000000000000000000000000000000000 j$
b0000000000000000000000000000000000000000000000000000000000000000 l$
b0000000000000000000000000000000000000000000000000000000000000000 n$
b0000000000000000000000000000000000000000000000000000000000000000 p$
b0000000000000000000000000000000000000000000000000000000000000000 r$
b0000000000000000000000000000000000000000000000000000000000000000 t$
b0000000000000000000000000000000000000000000000000000000000000000 v$
b0000000000000000000000000000000000000000000000000000000000000000 x$
b0000000000000000000000000000000000000000000000000000000000000000 z$
b0000000000000000000000000000000000000000000000000000000000000000 |$
b0000000000000000000000000000000000000000000000000000000000000000 ~$
b0000000000000000000000000000000000000000000000000000000000000000 "%
b0000000000000000000000000000000000000000000000000000000000000000 $%
b0000000000000000000000000000000000000000000000000000000000000000 &%
b0000000000000000000000000000000000000000000000000000000000000000 (%
b0000000000000000000000000000000000000000000000000000000000000000 *%
b0000000000000000000000000000000000000000000000000000000000000000 ,%
b0000000000000000000000000000000000000000000000000000000000000000 .%
b0000000000000000000000000000000000000000000000000000000000000000 0%
b0000000000000000000000000000000000000000000000000000000000000000 2%
b0000000000000000000000000000000000000000000000000000000000000000 4%
b0000000000000000000000000000000000000000000000000000000000000000 6%
b0000000000000000000000000000000000000000000000000000000000000000 8%
b0000000000000000000000000000000000000000000000000000000000000000 :%
b0000000000000000000000000000000000000000000000000000000000000000 <%
b0000000000000000000000000000000000000000000000000000000000000000 >%
b0000000000000000000000000000000000000000000000000000000000000000 @%
b0000000000000000000000000000000000000000000000000000000000000000 B%
b0000000000000000000000000000000000000000000000000000000000000000 D%
b0000000000000000000000000000000000000000000000000000000000000000 F%
b0000000000000000000000000000000000000000000000000000000000000000 H%
b0000000000000000000000000000000000000000000000000000000000000000 J%
b0000000000000000000000000000000000000000000000000000000000000000 L%
b0000000000000000000000000000000000000000000000000000000000000000 N%
b0000000000000000000000000000000000000000000000000000000000000000 P%
b0000000000000000000000000000000000000000000000000000000000000000 R%
b0000000000000000000000000000000000000000000000000000000000000000 T%
b0000000000000000000000000000000000000000000000000000000000000000 V%
b0000000000000000000000000000000000000000000000000000000000000000 X%
b0000000000000000000000000000000000000000000000000000000000000000 Z%
b0000000000000000000000000000000000000000000000000000000000000000 \%
b0000000000000000000000000000000000000000000000000000000000000000 ^%
b0000000000000000000000000000000000000000000000000000000000000000 `%
b0000000000000000000000000000000000000000000000000000000000000000 b%
b0000000000000000000000000000000000000000000000000000000000000000 d%
b0000000000000000000000000000000000000000000000000000000000000000 f%
b0000000000000000000000000000000000000000000000000000000000000000 h%
b0000000000000000000000000000000000000000000000000000000000000000 j%
b0000000000000000000000000000000000000000000000000000000000000000 l%
b0000000000000000000000000000000000000000000000000000000000000000 n%
b0000000000000000000000000000000000000000000000000000000000000000 p%
b0000000000000000000000000000000000000000000000000000000000000000 r%
b0000000000000000 t%
b00000000000000000000000000000000000000000000000000011000 u%
1w%
b000 x%
1y%
b000 z%
b0000000000000000000000000000000000000000000000000001100010000000 {%
b0000000000000000000000000000000000000000000000000001100010001000 }%
b00 !&
1"&
0#&
b00000000000000000000000000000000000000000000000000000000000000 $&
b0000000000000000000000000000000000000000000000000000000000000000 &&
0(&
0)&
0*&
0+&
0,&
0-&
0.&
0/&
00&
01&
02&
03&
04&
05&
06&
07&
08&
09&
0:&
0;&
0<&
0=&
0>&
0?&
0@&
0A&
0B&
0C&
0D&
0E&
b0000000000000000000000000000000000000000000000000000000000000000 F&
0H&
0I&
0J&
0K&
0L&
0M&
0N&
0O&
b0000000000000000000000000000000000000000000000000000000000000001 P&
0R&
0S&
0T&
0U&
0V&
0W&
0X&
0Y&
b0000000000000000000000000000000000000000000000000000000000000000 Z&
b0000000000000000000000000000000000000000000000000000000000000000 \&
b0000000000000000000000000000000000000000000000000000000000000000 ^&
b0000000000000000000000000000000000000000000000000000000000000000 `&
b0000000000000000000000000000000000000000000000000000000000000000 b&
b0000000000000000000000000000000000000000000000000000000000000000 d&
b0000000000000000000000000000000000000000000000000000000000000000 f&
b0000000000000000000000000000000000000000000000000000000000000000 h&
b0000000000000000000000000000000000000000000000000000000000000000 j&
b0000000000000000000000000000000000000000000000000000000000000000 l&
b0000000000000000000000000000000000000000000000000000000000000000 n&
b0000000000000000000000000000000000000000000000000000000000000000 p&
b0000000000000000000000000000000000000000000000000000000000000000 r&
b0000000000000000000000000000000000000000000000000000000000000000 t&
b0000000000000000000000000000000000000000000000000000000000000000 v&
b0000000000000000000000000000000000000000000000000000000000000000 x&
b0000000000000000000000000000000000000000000000000000000000000000 z&
b0000000000000000000000000000000000000000000000000000000000000000 |&
b0000000000000000000000000000000000000000000000000000000000000000 ~&
b0000000000000000000000000000000000000000000000000000000000000000 "'
b0000000000000000000000000000000000000000000000000000000000000000 $'
b0000000000000000000000000000000000000000000000000000000000000000 &'
b0000000000000000000000000000000000000000000000000000000000000000 ('
b0000000000000000000000000000000000000000000000000000000000000000 *'
b0000000000000000000000000000000000000000000000000000000000000000 ,'
b0000000000000000000000000000000000000000000000000000000000000000 .'
b0000000000000000000000000000000000000000000000000000000000000000 0'
b0000000000000000000000000000000000000000000000000000000000000000 2'
b0000000000000000000000000000000000000000000000000000000000000000 4'
b0000000000000000000000000000000000000000000000000000000000000000 6'
b0000000000000000000000000000000000000000000000000000000000000000 8'
b0000000000000000000000000000000000000000000000000000000000000000 :'
0<'
b000 ='
b0000000000000000000000000000000010000000000000000000000000000100 >'
0@'
1A'
1B'
1C'
0D'
b0000000000000000000000000000000000000000000000000000000000000000 E'
b0000000000000000000000000000000000000000000000000000000000000001 G'
b0000000000000000000000000000000000000000000000000000000000000000 I'
b0000000000000000000000000000000000000000000000000000000000000000 K'
1M'
b0000000000000000000000000000000000000000000000000000000000000000 N'
1P'
b00000 Q'
0R'
b00000 S'
b0000000000000000000000000000000000000000000000000000000000000000 T'
b0000000000000000000000000000000000000000000000000000000000000000 V'
1X'
0Y'
b0000000000000000000000000000000000000000000000000000000000000000 Z'
b1111111111111111111111111111111111111111111111111111111111111111 \'
b0000000000000000000000000000000000000000000000000000000000000000 ^'
0`'
0a'
0b'
b00000000 c'
0d'
b00000000 e'
0f'
0g'
b001 h'
b00001 i'
0j'
b0000000000000000000000000000000000000000000000000000000000000000 k'
b0000000000000000000000000000000000000000000000000000000000000000 m'
1o'
b0000000000000000000000000000000000000000000000000000000000000000 p'
b0000000000000000 r'
b0000000000000000 s'
b0000000000000000000000000000000000000000000000000000000000000000 t'
1v'
b000000000000 w'
b0000000000000000 x'
0y'
0z'
0{'
b000000000000 |'
b0000000000000000000000000000000000000000000000000000000000000000 }'
b000000000000 !(
b0000000000000000000000000000000000000000000000000000000000000000 "(
0$(
b000000000000000000000000000000000000000000000000000000000000000 %(
b0000000000000000000000000000000010000000000000000000000100000000 '(
b00000000 )(
b00 *(
#1
b0000000000000000000000000000000010000000000000000000000000000000 =
b0000000000000000000000000000000010000000000000000000000000000100 A
b00000000001000000000000010010011 C
b000000000010 N
b0000000000000000000000000000000010000000000000000000000000000000 O
b00000000000100000000000010010011 Q
b000000000001 S
b0000000000000000000000000000000000000000000000000000000000000001 Y
1[
b001 k
b00001 l
1m
1n
b000000000001 o
1r
b0000000000000000000000000000000000000000000000000000000000000001 y
0<"
b0000000000000000000000000000000000000000000000000000000000000010 ="
b00000000001000000000 L"
b000000000000000000010 M"
0["
b11101010 \#
b0000000000000000000000000000000000000000000000000000000000000001 _#
1a#
1z#
b00000000000000000000000000000000000000000000000000000000000000001 ~#
b00000000000000000000000000000000000000000000000000000000000000001 &$
b00000000000000000000000000000000000000000000000000000000000000001 ,$
b0000000000000000000000000000000000000000000000000000000000000001 1$
b0000000000000000000000000000000000000000000000000000000000000001 3$
b0000000000000000000000000000000000000000000000000000000000000001 7$
09$
b0000000000000000000000000000000000000000000000000000000000000010 P&
b0000000000000000000000000000000010000000000000000000000000001000 >'
b0000000000000000000000000000000000000000000000000000000000000010 G'
b0000000000000000000000000000000000000000000000000000000000000001 V'
b0000000000000000000000000000000000000000000000000000000000000001 k'
#2
b0000000000000000000000000000000010000000000000000000000000000100 =
b0000000000000000000000000000000010000000000000000000000000001000 A
b00000000000100001000000010010011 C
b000000000001 N
b0000000000000000000000000000000010000000000000000000000000000100 O
b00000000001000000000000010010011 Q
b0000000000000000000000000000000000000000000000000000000000000010 Y
b000000000010 o
b0000000000000000000000000000000000000000000000000000000000000010 y
b0000000000000000000000000000000010000000000000000000000000000000 {
b00000000000100000000000010010011 }
b0000000000000000000000000000000000000000000000000000000000000001 $!
b001 *!
b00001 +!
1,!
1.!
b0000000000000000000000000000000000000000000000000000000000000011 ="
b0000000000000000000000000110101100000000000100001000000010010011 A"
b00000000000100001000 L"
b000001000100000000000 M"
1["
b0000000000000000000000000000000000000000000000000000000000000010 _#
b00000000000000000000000000000000000000000000000000000000000000010 ~#
b00000000000000000000000000000000000000000000000000000000000000010 &$
b00000000000000000000000000000000000000000000000000000000000000010 ,$
b0000000000000000000000000000000000000000000000000000000000000010 1$
b0000000000000000000000000000000000000000000000000000000000000010 3$
b0000000000000000000000000000000000000000000000000000000000000010 7$
0:$
1;$
b0000000000000000000000000000000000000000000000000000000000000011 P&
b0000000000000000000000000000000010000000000000000000000000001100 >'
b0000000000000000000000000000000000000000000000000000000000000001 G'
b00001 Q'
b0000000000000000000000000000000000000000000000000000000000000010 V'
b0000000000000000000000000000000000000000000000000000000000000010 k'
#3
b0000000000000000000000000000000010000000000000000000000000001000 =
b0000000000000000000000000000000010000000000000000000000000001100 A
b00000000000000000000000001101011 C
b000000000000 F
0L
b000000000000 N
b0000000000000000000000000000000010000000000000000000000000001000 O
b00000000000100001000000010010011 Q
b0000000000000000000000000000000000000000000000000000000000000001 Y
b00001 a
b000000000001 o
b0000000000000000000000000000000000000000000000000000000000000010 s
b0000000000000000000000000000000000000000000000000000000000000010 w
b0000000000000000000000000000000000000000000000000000000000000001 y
b0000000000000000000000000000000010000000000000000000000000000100 {
b00000000001000000000000010010011 }
b0000000000000000000000000000000000000000000000000000000000000010 $!
b0000000000000000000000000000000010000000000000000000000000000000 /!
b00000000000100000000000010010011 1!
b001 2!
b0000000000000000000000000000000000000000000000000000000000000001 3!
b00001 9!
1:!
1=!
b0000000000000000000000000000000000000000000000000000000000000100 ="
b1101011 E"
b00000 I"
b000000000000 J"
b0000000000000 K"
b00000000000000000000 L"
b000000000000000000000 M"
1Z"
0["
0_"
0y"
0$#
0S#
1T#
1U#
b0000000000000000000000000000000000000000000000000000000000000010 ]#
b0000000000000000000000000000000000000000000000000000000000000001 _#
b00000000000000000000000000000000000000000000000000000000000000010 {#
b00000000000000000000000000000000000000000000000000000000000000001 ~#
b00000000000000000000000000000000000000000000000000000000000000010 #$
b00000000000000000000000000000000000000000000000000000000000000001 &$
b00000000000000000000000000000000000000000000000000000000000000011 ,$
b0000000000000000000000000000000000000000000000000000000000000011 1$
b0000000000000000000000000000000000000000000000000000000000000011 3$
b0000000000000000000000000000000000000000000000000000000000000001 7$
0;$
1<$
1P$
b0000000000000000000000000000000000000000000000000000000000000100 P&
b0000000000000000000000000000000010000000000000000000000000010000 >'
b0000000000000000000000000000000000000000000000000000000000000000 G'
0M'
0P'
b00000 Q'
b0000000000000000000000000000000000000000000000000000000000000001 T'
b0000000000000000000000000000000000000000000000000000000000000011 V'
b000 h'
b00000 i'
b0000000000000000000000000000000000000000000000000000000000000011 k'
0o'
#4
b0000000000000000000000000000000010000000000000000000000000001100 =
b0000000000000000000000000000000010000000000000000000000000010000 A
b00000000000000000000000000000000 C
b0000000000000000000000000000000010000000000000000000000000001100 O
b00000000000000000000000001101011 Q
b000000000000 S
b0000000000000000000000000000000000000000000000000000000000000000 Y
0[
b00000 a
b000 k
b00000 l
0m
0n
b000000000000 o
b0000000000000000000000000000000000000000000000000000000000000000 s
b0000000000000000000000000000000000000000000000000000000000000000 w
b0000000000000000000000000000000000000000000000000000000000000000 y
b0000000000000000000000000000000010000000000000000000000000001000 {
b00000000000100001000000010010011 }
b0000000000000000000000000000000000000000000000000000000000000011 $!
b0000000000000000000000000000000010000000000000000000000000000100 /!
b00000000001000000000000010010011 1!
b0000000000000000000000000000000000000000000000000000000000000010 3!
b0000000000000000000000000000000000000000000000000000000000000001 @!
14"
b00000001 5"
b0000000000000000000000000000000000000000000000000000000000000001 6"
b0000000000000000000000000000000010000000000000000000000000000000 8"
b00000000000100000000000010010011 :"
1;"
b0000000000000000000000000000000000000000000000000000000000000101 ="
b0000000000000000000000000000000000000000000000000000000000000001 ?"
b0000000000000000000000000000000000000000000000000000000000000000 A"
b0000000 E"
0T#
0U#
b11101001 \#
b0000000000000000000000000000000000000000000000000000000000000000 ]#
b0000000000000000000000000000000000000000000000000000000000000000 _#
0a#
0z#
b00000000000000000000000000000000000000000000000000000000000000000 {#
b00000000000000000000000000000000000000000000000000000000000000000 ~#
b00000000000000000000000000000000000000000000000000000000000000000 #$
b00000000000000000000000000000000000000000000000000000000000000000 &$
b00000000000000000000000000000000000000000000000000000000000000000 ,$
b0000000000000000000000000000000000000000000000000000000000000000 1$
b0000000000000000000000000000000000000000000000000000000000000000 3$
b0000000000000000000000000000000000000000000000000000000000000000 7$
19$
0<$
1=$
b0000000000000000000000000000000000000000000000000000000000000001 T$
b0000000000000000000000000000000000000000000000000000000000000001 6%
b0000000000000000000000000000000000000000000000000000000000000101 P&
b0000000000000000000000000000000000000000000000000000000000000001 \&
b0000000000000000000000000000000010000000000000000000000000010100 >'
b0000000000000000000000000000000000000000000000000000000000000010 T'
b0000000000000000000000000000000000000000000000000000000000000000 V'
b0000000000000000000000000000000000000000000000000000000000000000 k'
#5
b0000000000000000000000000000000010000000000000000000000000010000 =
b0000000000000000000000000000000010000000000000000000000000010100 A
b0000000000000000000000000000000010000000000000000000000000010000 O
b00000000000000000000000000000000 Q
b0000000000000000000000000000000010000000000000000000000000001100 {
b00000000000000000000000001101011 }
b0000000000000000000000000000000000000000000000000000000000000000 $!
b000 *!
b00000 +!
0,!
b0000000000000000000000000000000010000000000000000000000000001000 /!
b00000000000100001000000010010011 1!
b0000000000000000000000000000000000000000000000000000000000000011 3!
b0000000000000000000000000000000000000000000000000000000000000010 @!
b0000000000000000000000000000000000000000000000000000000000000010 6"
b0000000000000000000000000000000010000000000000000000000000000100 8"
b00000000001000000000000010010011 :"
b0000000000000000000000000000000000000000000000000000000000000110 ="
b0000000000000000000000000000000000000000000000000000000000000010 ?"
1:$
0=$
b0000000000000000000000000000000000000000000000000000000000000010 T$
b0000000000000000000000000000000000000000000000000000000000000010 6%
b0000000000000000000000000000000000000000000000000000000000000110 P&
b0000000000000000000000000000000000000000000000000000000000000010 \&
b0000000000000000000000000000000010000000000000000000000000011000 >'
b0000000000000000000000000000000000000000000000000000000000000011 T'
#6
b0000000000000000000000000000000010000000000000000000000000010100 =
b0000000000000000000000000000000010000000000000000000000000011000 A
b0000000000000000000000000000000010000000000000000000000000010100 O
b0000000000000000000000000000000010000000000000000000000000010000 {
b00000000000000000000000000000000 }
b0000000000000000000000000000000010000000000000000000000000001100 /!
b00000000000000000000000001101011 1!
b000 2!
b0000000000000000000000000000000000000000000000000000000000000000 3!
b00000 9!
0:!
b0000000000000000000000000000000000000000000000000000000000000011 @!
b0000000000000000000000000000000000000000000000000000000000000011 6"
b0000000000000000000000000000000010000000000000000000000000001000 8"
b00000000000100001000000010010011 :"
b0000000000000000000000000000000000000000000000000000000000000111 ="
b0000000000000000000000000000000000000000000000000000000000000011 ?"
0P$
b0000000000000000000000000000000000000000000000000000000000000011 T$
b0000000000000000000000000000000000000000000000000000000000000011 6%
b0000000000000000000000000000000000000000000000000000000000000111 P&
b0000000000000000000000000000000000000000000000000000000000000011 \&
1<'
b0000000000000000000000000000000010000000000000000000000000011100 >'
b0000000000000000000000000000000000000000000000000000000000000000 T'
#7
b0000000000000000000000000000000010000000000000000000000000011000 =
b0000000000000000000000000000000010000000000000000000000000011100 A
b0000000000000000000000000000000010000000000000000000000000011000 O
b0000000000000000000000000000000010000000000000000000000000010100 {
b0000000000000000000000000000000010000000000000000000000000010000 /!
b00000000000000000000000000000000 1!
04"
b00000000 5"
b0000000000000000000000000000000000000000000000000000000000000000 6"
b0000000000000000000000000000000010000000000000000000000000001100 8"
b00000000000000000000000001101011 :"
b0000000000000000000000000000000000000000000000000000000000001000 ="
b0000000000000000000000000000000000000000000000000000000000000100 ?"
b0000000000000000000000000000000000000000000000000000000000001000 P&
0<'
b0000000000000000000000000000000010000000000000000000000000100000 >'
